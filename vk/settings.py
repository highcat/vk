# -*- coding: utf-8 -*-
"""
Django settings for vk project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import djcelery
djcelery.setup_loader()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DJANGO_ROOT = os.path.dirname(os.path.abspath(__file__)) + '/'


# 'DEV' - for developer's machine;
#         Users won't receive emails or other data,
#         even if the database has been cloned from production server.
#
# 'PROD' - for production deployment.
#
# 'STAGE' - for testing deployment; mail will be sent to users, with [STAGE] prefix.
#
# 'TEST' - means that code run from automated testing environment;
#          will be set automatically, if you run `./manage.py test` or `make test`
#
PROFILE = 'DEV'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=3hg#w$w)aq+lxyvc&(hjy48ijfjklhu89G(&GYIskldfhuigd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.flatpages',
    #
    'django_jinja',
    'django_assets',
    'djcelery',
    'django_nose',    
    'hijack', # user switch 4 admins & debug
    'compat', # mostly for hijack
    'sortedm2m',
    'adminsortable2', # admin: sortable TabularInline using D&D
    'ajax_select', # admin: ForeignKey, M2M, etc by typing, more customizable
    'rest_framework',
    'codemirror2',
    # 
    'utils',
    'shop',
    # 
    # 'social.apps.django_app.default',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'social.apps.django_app.middleware.SocialAuthExceptionMiddleware', # catches social auth errors
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'vk.urls'

# Connect Django-Assets to Django-Jinja: assets_environment to Jinja2 environment
from webassets.ext.jinja2 import AssetsExtension
from django_assets.env import get_env
class Jinja2AssetsExtension(AssetsExtension):
    def __init__(self, environment):
        super(Jinja2AssetsExtension, self).__init__(environment)
        environment.assets_environment = get_env()

DJANGO_BASED_TEMPLATES = [
    'admin/',
    'registration/',
    'rest_framework/',
    'sortedm2m/',
    '404.html',
    '500.html',
]
from django_jinja.builtins import DEFAULT_EXTENSIONS
_CONTEXT_PROCESSORS = [
    # Django default:
    "django.contrib.auth.context_processors.auth",
    "django.template.context_processors.debug",
    "django.template.context_processors.i18n",
    "django.template.context_processors.media",
    "django.template.context_processors.static",
    "django.template.context_processors.tz",
    "django.contrib.messages.context_processors.messages",
    # # social-auth
    # 'social.apps.django_app.context_processors.backends',
    # 'social.apps.django_app.context_processors.login_redirect',
    # own
    "shop.context.site_wide",
]
TEMPLATES = [
    # jinja goes first
    {
        'NAME': 'jinja2',
        "BACKEND": "django_jinja.backend.Jinja2",
        "APP_DIRS": True,
        'DIRS': [
            DJANGO_ROOT + '../templates/',
        ],
        'OPTIONS': {
            "match_extension": ".html",
            # regex excluding Django templates
            "match_regex": r"^(?!{0}).*".format('|'.join(DJANGO_BASED_TEMPLATES)),
            'context_processors': _CONTEXT_PROCESSORS,
            "extensions": DEFAULT_EXTENSIONS + [
                Jinja2AssetsExtension,
            ],
            "autoescape": True,
            "auto_reload": False, # will be updated later with DEBUG
        },

    },
    {
        'NAME': 'django',
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            DJANGO_ROOT + '../templates/',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': _CONTEXT_PROCESSORS,
        },
    },
]

# XXX currently not testing things with database.
#TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
TEST_RUNNER = 'utils.nose_runner.NoDatabaseRunner'

WSGI_APPLICATION = 'vk.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'vk',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

# where you want to be redirected to, after hijacking the user.
HIJACK_LOGIN_REDIRECT_URL = "/admin/"
# where you want to be redirected to, after releasing the user.
HIJACK_LOGOUT_REDIRECT_URL = "/admin/"
SHOW_HIJACKUSER_IN_ADMIN = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_ROOT = os.path.abspath(os.path.join(DJANGO_ROOT, '../s/'))
STATIC_URL = '/s/'
MEDIA_ROOT = os.path.abspath(os.path.join(DJANGO_ROOT, '../media/'))
MEDIA_URL = '/media/'

SITE_URL = "http://vkusnyan.ru"
SITE_ID = 2

STATICFILES_DIRS = (
    DJANGO_ROOT + '../static/',
)

LOGIN_URL = '/login/'

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django_assets.finders.AssetsFinder',
)

ASSETS_CACHE = True
ASSETS_MANIFEST = "file:gen/dusty.manifest"
ASSETS_MODULES = ['shop.assets',]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'root_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': DJANGO_ROOT + '/../var/log/root.log',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'misc_scripts': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': DJANGO_ROOT + '/../var/log/misc_scripts.log',
            'formatter': 'verbose',
        },
        'management_script': { # Used by web_tasks library & management commands
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': DJANGO_ROOT + '/../var/log/management_script.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['root_file'],
        'level': 'ERROR',
        },
    'loggers': {
        'django.request': {
            'handlers': ['root_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'misc_scripts': {
            'level': 'INFO',
            'handlers': ['misc_scripts'],
            'propagate': True, # propagate, so errors passed to Sentry
        },
        'management_script': {
            'level': 'WARNING',
            'handlers': ['management_script'],
            'propagate': True, # propagate, so errors passed to Sentry
        },
    },
}

import emailer
EMAIL_ACCOUNT = emailer.Account(
    email='info@vkusnyan.ru',
    fromname=u'Магазин Вкуснян',
    server='smtp.mailgun.org',
    ssl=True,
    port='465',
    login='***',
    password='***',
)
EMAIL_ORDERS_TO = []

# Reasonable defaults for Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Using sessions for API and website both.
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'utils.rest.SuperuserPermission',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'utils.rest.CommonPagination',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'PAGINATE_BY': 20,
    'PAGINATE_BY_PARAM': 'pageSize', # Allow client to override, using `?pageSize=xxx`.
    'MAX_PAGINATE_BY': 100, # Maximum limit allowed when using `?pageSize=xxx`.
}


# Celery settings.
# See http://docs.celeryproject.org/en/2.5/getting-started/brokers/redis.html#broker-redis
BROKER_URL = 'redis://localhost:6379/0'
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_IGNORE_RESULT = True
CELERY_SEND_EVENTS = True # for monitoring with Flower

# allow WebVisor
X_FRAME_OPTIONS = 'ALLOW-FROM http://webvisor.com/'


FRONTPAD_API_SECRET = "***"
RETAILCRM_API_SECRET = "***"
RETAILCRM_ACCOUNT_NAME = 'smarta'
RETAILCRM_SHOP_ID = 'vkusnyan-ru'
RETAILCRM_ALL_STORES = [
    'polus-tretyak',
    'smarta-red-room',
]


LOGIN_URL = '/admin/login/'

GOOGLE_SHEETS_CLIENT_ID = '***'
GOOGLE_SHEETS_CLIENT_SECRET = '***'


############################################################################
# load local settings
try:
    from vk.localsettings import *
    raise Exception("localsettings.py should be in project's root")
except ImportError:
    pass
from localsettings import *
# /load local settings
############################################################################


# if PROTOCOL == 'https':
#     SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
#     # Django behind proxy should know it's HTTPS
#     SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ASSETS_DEBUG = DEBUG

# set auto-reload for Jinja
assert TEMPLATES[0]['BACKEND'] == "django_jinja.backend.Jinja2"
TEMPLATES[0]['OPTIONS']["auto_reload"] = DEBUG


if DEBUG and PROFILE != 'TEST':
    # Log to conlsole only in DEBUG,
    # so cron scripts won't send exceptions to admin's email (see MAILTO=... in crontab)
    LOGGING['root']['handlers'].append('console')


if USE_SENTRY:
    # Errors from Django
    INSTALLED_APPS += (
        'raven.contrib.django',
        'raven.contrib.django.celery',
    )

    # Errors from root logger, e.g. log.error()
    LOGGING['handlers']['sentry'] = {
       'level': 'WARNING',
       'class': 'raven.contrib.django.handlers.SentryHandler',
    }
    LOGGING['root']['handlers'].append('sentry')

assert PROFILE == 'PROD' and not DEBUG or PROFILE != 'PROD'



import django
django.setup()


TINYPNG_API_KEY = "***"
